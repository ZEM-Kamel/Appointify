import 'package:appointify_app/core/helper_functions/get_user.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:appointify_app/features/appointments/domain/entities/appointment_entity.dart';
import 'package:appointify_app/features/appointments/domain/repos/appointments_repo.dart';
import 'package:appointify_app/features/auth/domain/entities/user_entity.dart';
import 'package:appointify_app/features/specialists/domain/entities/specialist_entity.dart';
import 'package:uuid/uuid.dart';
import 'package:appointify_app/core/errors/failures.dart';

part 'appointments_state.dart';

class AppointmentsCubit extends Cubit<AppointmentsState> {
  final AppointmentsRepo _appointmentsRepo;

  AppointmentsCubit({required AppointmentsRepo appointmentsRepo})
      : _appointmentsRepo = appointmentsRepo,
        super(AppointmentsInitial());

  Future<void> loadAppointments(String userId) async {
    emit(AppointmentsLoading());
    final result = await _appointmentsRepo.getAppointments(userId);
    result.fold(
      (failure) => emit(AppointmentsError(message: _mapFailureToMessage(failure))),
      (appointments) => emit(AppointmentsLoaded(appointments: appointments)),
    );
  }

  Future<void> bookAppointment(AppointmentEntity appointment) async {
    emit(AppointmentsLoading());
    final result = await _appointmentsRepo.bookAppointment(appointment);
    result.fold(
      (failure) => emit(AppointmentsError(message: _mapFailureToMessage(failure))),
      (appointment) => loadAppointments(appointment.user.uId),
    );
  }

  Future<void> cancelAppointment(String appointmentId) async {
    emit(AppointmentsLoading());
    final result = await _appointmentsRepo.cancelAppointment(appointmentId);
    result.fold(
      (failure) => emit(AppointmentsError(message: _mapFailureToMessage(failure))),
      (_) => loadAppointments(state is AppointmentsLoaded ? (state as AppointmentsLoaded).appointments.first.user.uId : ''),
    );
  }

  Future<void> rescheduleAppointment(
    String appointmentId,
    DateTime newDate,
    String newTime,
  ) async {
    emit(AppointmentsLoading());
    final result = await _appointmentsRepo.rescheduleAppointment(
      appointmentId,
      newDate,
      newTime,
    );
    result.fold(
      (failure) => emit(AppointmentsError(message: _mapFailureToMessage(failure))),
      (_) => loadAppointments(state is AppointmentsLoaded ? (state as AppointmentsLoaded).appointments.first.user.uId : ''),
    );
  }

  Future<List<String>> getAvailableTimeSlots(
    String specialistId,
    DateTime date,
  ) async {
    final result = await _appointmentsRepo.getAvailableTimeSlots(
      specialistId,
      date,
    );
    return result.fold(
      (failure) => throw Exception(_mapFailureToMessage(failure)),
      (timeSlots) => timeSlots,
    );
  }

  String _mapFailureToMessage(Failure failure) {
    switch (failure.runtimeType) {
      case ServerFailure:
        return 'Server error occurred';
      default:
        return 'Unexpected error occurred';
    }
  }
}