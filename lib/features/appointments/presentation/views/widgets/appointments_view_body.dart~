import 'package:appointify_app/core/utils/app_text_styles.dart';
import 'package:appointify_app/features/appointments/domain/entities/appointment_entity.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:appointify_app/constants.dart';
import 'package:appointify_app/core/helper_functions/get_user.dart';
import 'package:appointify_app/features/appointments/presentation/cubits/appointments_cubit/appointments_cubit.dart';
import 'package:appointify_app/features/appointments/presentation/views/widgets/appointment_card.dart';
import 'package:appointify_app/features/appointments/presentation/views/widgets/reschedule_appointment_dialog.dart';
import 'package:intl/intl.dart';

class AppointmentsViewBody extends StatelessWidget {
  const AppointmentsViewBody({super.key});

  @override
  Widget build(BuildContext context) {
    return BlocConsumer<AppointmentsCubit, AppointmentsState>(
      listener: (context, state) {
        if (state is AppointmentsError) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(content: Text(state.message)),
          );
        } else if (state is AppointmentCancelled) {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(content: Text('Appointment cancelled successfully')),
          );
        } else if (state is AppointmentRescheduled) {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(content: Text('Appointment rescheduled successfully')),
          );
        }
      },
      builder: (context, state) {
        if (state is AppointmentsLoading) {
          return const Center(child: CircularProgressIndicator());
        } else if (state is AppointmentsLoaded) {
          final upcomingAppointments = state.appointments
              .where((appointment) =>
                  appointment.status == 'scheduled' &&
                  appointment.date.isAfter(DateTime.now()))
              .toList()
            ..sort((a, b) => a.date.compareTo(b.date));

          final pastAppointments = state.appointments
              .where((appointment) =>
                  appointment.status == 'completed' ||
                  appointment.date.isBefore(DateTime.now()))
              .toList()
            ..sort((a, b) => b.date.compareTo(a.date));

          return CustomScrollView(
            slivers: [
              if (upcomingAppointments.isNotEmpty) ...[
                SliverToBoxAdapter(
                  child: Padding(
                    padding: const EdgeInsets.all(16),
                    child: Text(
                      'Upcoming Appointments',
                      style: TextStyles.bold19,
                    ),
                  ),
                ),
                SliverList(
                  delegate: SliverChildBuilderDelegate(
                    (context, index) {
                      final appointment = upcomingAppointments[index];
                      return AppointmentCard(
                        appointment: appointment,
                        onCancel: () => _showCancelConfirmation(context, appointment),
                        onReschedule: () => _showRescheduleDialog(context, appointment),
                      );
                    },
                    childCount: upcomingAppointments.length,
                  ),
                ),
              ],
              if (pastAppointments.isNotEmpty) ...[
                SliverToBoxAdapter(
                  child: Padding(
                    padding: const EdgeInsets.all(16),
                    child: Text(
                      'Past Appointments',
                      style: TextStyles.bold19,
                    ),
                  ),
                ),
                SliverList(
                  delegate: SliverChildBuilderDelegate(
                    (context, index) {
                      final appointment = pastAppointments[index];
                      return AppointmentCard(
                        appointment: appointment,
                        isPast: true,
                      );
                    },
                    childCount: pastAppointments.length,
                  ),
                ),
              ],
              if (upcomingAppointments.isEmpty && pastAppointments.isEmpty)
                const SliverFillRemaining(
                  child: Center(
                    child: Text('No appointments found'),
                  ),
                ),
            ],
          );
        } else if (state is AppointmentsError) {
          return Center(
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                Text(state.message),
                const SizedBox(height: 16),
                ElevatedButton(
                  onPressed: () {
                    context.read<AppointmentsCubit>().getUserAppointments();
                  },
                  child: const Text('Retry'),
                ),
              ],
            ),
          );
        }
        return const SizedBox.shrink();
      },
    );
  }

  void _showCancelConfirmation(BuildContext context, AppointmentEntity appointment) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Cancel Appointment'),
        content: Text(
          'Are you sure you want to cancel your appointment with ${appointment.specialist.name} on ${DateFormat('MMM dd, yyyy').format(appointment.date)} at ${appointment.time}?',
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('No'),
          ),
          TextButton(
            onPressed: () {
              context.read<AppointmentsCubit>().cancelAppointment(appointment.id);
              Navigator.pop(context);
            },
            child: const Text('Yes'),
          ),
        ],
      ),
    );
  }

  void _showRescheduleDialog(BuildContext context, AppointmentEntity appointment) {
    showDialog(
      context: context,
      builder: (context) => RescheduleAppointmentDialog(
        appointment: appointment,
        onReschedule: (newDate, newTime) {
          context.read<AppointmentsCubit>().rescheduleAppointment(
                appointment.id,
                newDate,
                newTime,
              );
        },
      ),
    );
  }
} 